@page "/todo"
@inject ITaskModelService taskService

<h3 class="mt-4">@HeaderName</h3>

<div class="row">
    <div class="col-md-4">
        <EditForm Model="newTask" class="form-inline mb-3" OnValidSubmit="AddTask">
            <input class="form-control mr-2" type="text" @bind-value="newTask.TaskName" />
            <button class="btn btn-outline-primary">Add Task</button>
        </EditForm>

        <ul class="list-group" >
            @foreach (var task in tasks)
            {
                <li class="@GetTaskClass(task) list-group-item d-flex justify-content-between align-items-center" AllowDragAndDrop="true" onclick="()=>ToggleTaskCompletion(task)">
                    @if (task.IsComplete)
                    {
                    <li class="list-group-item list-group-item-success mx-1" @onclick="(()=> task.IsComplete = !task.IsComplete)"><del>@task.TaskName</del></li>
                    }
                    else
                    {
                        @if (task == selectedTask)
                        {
                            <input class="form-control" @bind="task.TaskName" @onblur="()=>FinishEditing(task)" />
                        }
                        else
                        {
                             <li class="list-group-item list-group-item-secondary mx-1" @onclick="(()=> task.IsComplete = !task.IsComplete)">@task.TaskName</li>
                        }
                    }
                    <button @onclick="()=>StartEditing(task)" class="btn btn-primary btn-sm ml-2 float-right">Edit</button>
                    <button @onclick="()=>DeleteTask(task.Id)" class="btn btn-danger btn-sm ml-2 float-right">Delete</button>
                </li>
            }
        </ul>
    </div>
</div>



@code {
    //C# Code
    protected List<TaskModel> tasks = new List<TaskModel>();
    protected TaskModel newTask = new TaskModel();
    protected TaskModel selectedTask = null;
    private int draggingTaskId;

    protected override void OnInitialized()
    {
        tasks = taskService.GetAllTask();
        if(HeaderName == "")
        {
            HeaderName = "ToDo";
        }
    }

    [Parameter]
    public string Status {get; set;}

    [Parameter]
    public string HeaderName { get; set; }

    void AddTask()
    {
        tasks = taskService.GetAllTask(); // Update the tasks list after adding a new task
        newTask = new TaskModel(); // Clear the task input after adding
    }

    void DeleteTask(int taskId)
    {
        taskService.Delete(taskId);
        tasks = taskService.GetAllTask();
    }


    void ToggleTaskCompletion(TaskModel task)
    {
        task.IsComplete = !task.IsComplete;
        // Optionally, you can update the task in the database here
    }

    void EditTask(TaskModel task)
    {
        // Set the selected task for editing
        selectedTask = task;
    }


    void StartEditing(TaskModel task)
    {
        selectedTask = task;
    }

    void FinishEditing(TaskModel task)
    {
        selectedTask = null;
        taskService.UpdateTask(task);
        // Optionally, you can update the task in the database here
    }

    string GetTaskClass(TaskModel task)
    {
        return task.IsComplete ? "list-group-item list-group-item-success mx-1" : "list-group-item list-group-item-secondary mx-1";
    }


}
